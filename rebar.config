%% == Erlang Compiler ==
%% Erlang compiler options
{erl_opts, [debug_info]}.

%% == Dependencies ==
{deps,
 [{erlware_commons,
   {git, "https://github.com/erlware/erlware_commons.git", {branch, "master"}}},
  {parse_trans, {git, "https://github.com/uwiger/parse_trans.git", {branch, "master"}}}]}.

%% == Shell ==
{shell,
 [{sys_config, "./config/sys.config"},
  {vm_args, "./config/vm.args"},
  %% the .src form of the configuration files do
  %% not require setting RELX_REPLACE_OS_VARS
  {sys_config_src, "./config/sys.config.src"},
  {vm_args_src, "./config/vm.args.src"},
  %% boot seresye when running rebar3 shell
  {apps, [seresye]}]}.

%% == Profiles ==
%% Configs used in generating prod, dev, test, etc. releases
{profiles,
 [{prod,
   [{relx,
     [%% prod is the default mode when prod
      %% profile is used, so does not have
      %% to be explicitly included like this
      [mode, prod],
      %% use minimal mode to exclude ERTS
      %%{mode, minimal}
      %% automatically picked up if the files
      %% exist but can be set manually, which
      %% is required if the names aren't exactly
      %% sys.config and vm.args
      {sys_config, "./config/sys.config"},
      {vm_args, "./config/vm.args"},
      %% the .src form of the configuration files do
      %% not require setting RELX_REPLACE_OS_VARS
      {sys_config_src, "./config/sys.config.src"},
      {vm_args_src, "./config/vm.args.src"},
      %%{dev_mode, false},
      %%{include_src, false},
      %%{include_erts, true},
      {debug_info, strip}]}]},
  {test,
   [{erl_opts, [debug_info, nowarn_export_all, {extra_src_dirs, ["examples"]}]},
    {deps, []}]}]}.

%% == EUnit ==
%% $ rebar3 eunit
%% Options for eunit:test(Tests, Opts)
{eunit_opts, [verbose, {report, {eunit_surefire, [{dir, "."}]}}]}.

%% == Cover ==
%% Whether to enable coverage reporting where commands support cover.
%% Default is false.
{cover_enabled, true}.

{cover_print_enabled, true}.

{cover_export_enabled, true}.

{covertool, [{coverdata_files, ["ct.coverdata"]}]}.

%% == Common Test ==
%% $ rebar3 ct
%% {erl_opts, [...]}, but for CT runs
{ct_compile_opts, []}.

%% {erl_first_files, ...} but for CT runs
{ct_first_files, []}.

%% Options as for ct:run_test(Opts)
{ct_opts,
 [{sys_config, "config/test/test.config"},
  %% generate junit xml report from test results
  {ct_hooks, [cth_surefire]}]}.

%% == Dialyzer ==
%% $ rebar3 dialyzer
%% $ rebar3 as dialzye dialyzer
{dialyzer,
 [{warnings, [underspecs, no_return]},
  {get_warnings, true},
  {output_format, raw}, % see rebar3_dialyzer_html plugin below
  %%{plt_apps, top_level_deps}, % top_level_deps | all_deps
  %%{plt_extra_apps, []},
  %%{plt_location, local}, % local | "/my/file/name"
  {plt_prefix, "rebar3"},
  %%{base_plt_apps, [stdlib, kernel, crypto]},
  %%{base_plt_location, global}, % global | "/my/file/name"
  {base_plt_prefix, "rebar3"}]}.

%% == xref ==
%% $ rebar3 xref
%% Xref is Cross Reference Tool used for
%% analyzing and finding dependencies between functions, modules, applications and releases.
{xref_warnings, false}.

%% optional extra paths to include in xref:set_library_path/2.
%% specified relative location of rebar.config.
%% e.g. {xref_extra_paths,["../gtknode/src"]}
{xref_extra_paths, []}.

%% xref checks to run
{xref_checks,
 [%%undefined_functions,
  %%locals_not_used,
  %%deprecated_function_calls,
  %%deprecated_functions,
  undefined_function_calls,
  exports_not_used]}.

%% Optional custom xref queries (xref manual has details) specified as
%%{xref_queries, [{query_string(), expected_query_result()},...]}
%% The following for example removes all references to mod:*foo/4
%% functions from undefined external function calls as those are in a
%% generated module
%%{xref_queries,
%%[{"(XC - UC) || (XU - X - B"
%%" - (\"mod\":\".*foo\"/\"4\"))",[]}]}.

%% You might want to exclude certain functions or modules from your
%% rebar3 xref analysis.
%% You can do so with the following option, that takes as list items
%% one or more of a combination of:
%% * module(),
%% * {module(), function()},
%% * {module(), function(), arity()}
{xref_ignores, []}.

%% == plugins ==
%% rebar3 dialyzer_html
%% https://www.srijn.net/erlang-dialyzer-html-reports-rebar3/
%% https://github.com/srijan/rebar3_dialyzer_html
%% Rebar3 plugin to generate an HTML report from dialyzer output
%% $ rebar3 dialyzer
%% $ rebar3 dialyzer_html
{plugins,
 [{rebar3_dialyzer_html,
   {git, "https://github.com/srijan/rebar3_dialyzer_html.git", {branch, "main"}}}]}.

%% == project plugins ==
%% elvis
%% elvis is Erlang Style Reviewer
%% https://github.com/inaka/elvis
%% https://github.com/inaka/elvis_core
%%
%% lint
%% rebar3_lint is a rebar3 plugin to ease the integration of elvis
%% see elvis.config on the root directory
%% https://github.com/project-fifo/rebar3_lint
%% $ rebar3 lint
%%
%% rebar3 hank
%% https://github.com/AdRoll/rebar3_hank
%% The Erlang Dead Code Cleaner
%% $ rebar3 hank
%%
%% https://github.com/AdRoll/rebar3_format
%% $ rebar3 format
{project_plugins, [rebar3_lint, rebar3_hank, rebar3_format]}.

%% $ rebar3 test
{alias,
 [{test, [compile, format, lint, hank, dialyzer, {ct, "--verbose"}, cover, edoc]}]}.
